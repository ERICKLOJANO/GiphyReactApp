{"version":3,"sources":["logo.svg","GIFCard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["GIFCard","className","src","this","props","imageSrc","alt","Component","App","state","searchQuery","gifs","SearchGifs","bind","UpdateQuery","SearchTrendingGifs","event","setState","target","value","Axios","get","params","api_key","q","lang","then","response","console","log","data","catch","error","limit","onChange","placeholder","onClick","SearchRandomGif","id","map","Entry","images","downsized","url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAAe,I,eCiBAA,G,6KAZX,OACE,qBAAKC,UAAY,QAAjB,SACE,qBACEC,IAAOC,KAAKC,MAAMC,SAClBC,IAAM,c,GAPMC,cC2GPC,E,kDAnGd,WAAYJ,GAAQ,IAAD,8BAClB,cAAMA,IACDK,MAAQ,CACZC,YAAa,GACbC,KAAK,IAEN,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBARR,E,wDAYPG,GACVb,KAAKc,SAAS,CAAEP,YAAaM,EAAME,OAAOC,U,mCAG9B,IAAD,OACZC,IAAMC,IAAI,uCAAwC,CACjDC,OAAQ,CACPC,QAAS,mCACTC,EAAGrB,KAAKM,MAAMC,YACde,KAAM,QAGNC,MAAK,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKV,SAAS,CAACN,KAAKgB,EAASG,KAAKA,OAClCF,QAAQC,IAAI,EAAKpB,MAAME,MACvBiB,QAAQC,IAAI,EAAKpB,MAAMC,gBAEvBqB,OAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,Q,2CAGX,IAAD,OACnBZ,IAAMC,IAAI,yCAA0C,CACnDC,OAAO,CACNC,QAAS,mCACTE,KAAM,KACNQ,MAAO,OAGRP,MAAK,SAACC,GACN,EAAKV,SAAS,CACbN,KAAMgB,EAASG,KAAKA,UAGrBC,OAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,Q,kCAoBnBhB,GACXb,KAAKc,SAAS,CAAEP,YAAaM,EAAME,OAAOC,U,+BAI1C,OACC,sBAAKlB,UAAY,gBAAjB,UACA,qBAAKA,UAAY,YAAjB,SACC,uBACAiC,SAAU/B,KAAKW,YAAaK,MAAOhB,KAAKM,MAAMC,YAAayB,YAAc,wBAG1E,uBACA,sBAAKlC,UAAY,kBAAjB,UACC,wBAAQmC,QAASjC,KAAKS,WAAtB,oBACA,wBAAQwB,QAASjC,KAAKY,mBAAtB,sBACA,wBAAQqB,QAASjC,KAAKkC,gBAAtB,+BAED,uBACC,qBAAKC,GAAK,eAAV,SACCnC,KAAKM,MAAME,KAAK4B,KAAI,SAACC,GACrB,OACC,cAAC,EAAD,CACCnC,SAAYmC,EAAMC,OAAOC,UAAUC,kB,GA1FxBpC,aCGHqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.85cc15f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react'\n\nclass GIFCard extends Component{\n\n  render(){\n    return(\n      <div className = \"image\">\n        <img\n          src = {this.props.imageSrc}\n          alt = \"gif\"\n        >\n        </img>\n      </div>\n    )\n  }\n}\n\nexport default GIFCard;\n","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport './App.css';\n\nimport GIFCard from './GIFCard'\n// import SearchField from './SearchField'\n\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchQuery: '',\n\t\t\tgifs:[]\n\t\t};\n\t\tthis.SearchGifs = this.SearchGifs.bind(this);\n\t\tthis.UpdateQuery = this.UpdateQuery.bind(this);\n\t\tthis.SearchTrendingGifs = this.SearchTrendingGifs.bind(this);\n\t\t// this.SearchRandomGif = this.SearchRandomGif.bind(this);\n\t}\n\n\tUpdateQuery(event) {\n\t  this.setState({ searchQuery: event.target.value });\n\t}\n\n\tSearchGifs() {\n\t\tAxios.get('https://api.giphy.com/v1/gifs/search', {\n\t\t\tparams: {\n\t\t\t\tapi_key: 'AZ6pMJriyxR3EPcTbZGZHy3wJLGrvnO4',\n\t\t\t\tq: this.state.searchQuery,\n\t\t\t\tlang: 'en',\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tthis.setState({gifs:response.data.data});\n\t\t\t\tconsole.log(this.state.gifs)\n\t\t\t\tconsole.log(this.state.searchQuery)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t}\n\n\tSearchTrendingGifs(){\n\t\tAxios.get('https://api.giphy.com/v1/gifs/trending', {\n\t\t\tparams:{\n\t\t\t\tapi_key: 'AZ6pMJriyxR3EPcTbZGZHy3wJLGrvnO4',\n\t\t\t\tlang: 'en',\n\t\t\t\tlimit: '3'\n\t\t\t},\n\t\t})\n\t\t.then((response) => {\n\t\t\tthis.setState({\n\t\t\t\tgifs: response.data.data,\n\t\t\t});\n\t\t})\n\t\t.catch((error) => console.log(error));\n\t}\n\n/*\n\tDOESNT WORK\n\t\tSearchRandomGif(){\n\t\tAxios.get(' http://api.giphy.com/v1/gifs/random',{\n\t\t\tparams:{\n\t\t\t\tapi_key: 'AZ6pMJriyxR3EPcTbZGZHy3wJLGrvnO4',\n\t\t\t\tlang: 'en',\n\t\t\t},\n\t\t})\n\t\t.then((response) => {\n\t\t\tthis.setState({\n\t\t\t\tgifs: response.data,\n\t\t\t});\n\t\t})\n\t\t.catch((error) => console.log(error));\n\t}*/\n\n\tUpdateQuery(event) {\n\t\tthis.setState({ searchQuery: event.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className = \"mainContainer\">\n\t\t\t<div className = \"searchBar\">\n\t\t\t\t<input\n\t\t\t\tonChange={this.UpdateQuery} value={this.state.searchQuery} placeholder = \"Search Something!\">\n\t\t\t\t</input>\n\t\t\t</div>\n\t\t\t<br></br>\n\t\t\t<div className = \"buttonContainer\">\n\t\t\t\t<button onClick={this.SearchGifs}>Search</button>\n\t\t\t\t<button onClick={this.SearchTrendingGifs}>TRENDING</button>\n\t\t\t\t<button onClick={this.SearchRandomGif}>Feeling Lucky?</button>\n\t\t\t</div>\n\t\t\t<br></br>\n\t\t\t\t<div id = \"gifContainer\">\n\t\t\t\t{this.state.gifs.map((Entry) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<GIFCard\n\t\t\t\t\t\t\timageSrc = {Entry.images.downsized.url}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}